{"version":3,"sources":["webpack://template20/./scripts/common/sources/weather.js","webpack://template20/./scripts/modules/weather/Search.jsx","webpack://template20/./scripts/modules/weather/WeatherContent/Title.jsx","webpack://template20/./scripts/modules/weather/WeatherContent/Main.jsx","webpack://template20/./scripts/modules/weather/WeatherContent/Forecast.jsx","webpack://template20/./scripts/modules/weather/WeatherContent/index.jsx","webpack://template20/./scripts/modules/weather/index.jsx"],"names":["getWeather","query","axios","process","useStyles","makeStyles","theme","root","marginBottom","spacing","SearchCity","city","setCity","classes","className","placeholder","variant","name","onChange","e","target","value","InputProps","startAdornment","position","Search","propTypes","PropTypes","location","marginRight","date","paddingTop","WeatherDataTitle","country","timezone","dateCorrect","Date","toDateString","component","paper","display","justifyContent","alignItems","paperMain","flexWrap","padding","image","width","height","paperItem","flex","data","marginLeft","fontWeight","WeatherDataMain","humidity","wind","probability","pressure","temp","description","sunset","sunrise","icon","sunsetFormatted","toLocaleTimeString","slice","sunriseFormatted","pressureFormatted","Math","floor","iconUrl","container","justify","item","xs","md","lg","elevation","src","alt","noWrap","card","flexDirection","flexShrink","img","maxWidth","maxHeight","text","whiteSpace","WeatherForecast","forecastData","map","key","datetime","weather","WeatherData","weatherData","city_name","country_code","firstDayData","ts","pop","wind_spd","sunrise_ts","pres","rh","sunset_ts","useState","useDataFetcher","execute","loading","error","useEffect","debouncedSetCity","isEmptyData","isShowContent","isDefault","isLoading","Helmet","in","gutterBottom","WeatherContent","message"],"mappings":"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","file":"js/202.8b930266361870922b04.bundle.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getWeather = (query) => {\r\n  return axios.get(\r\n    `https://api.weatherbit.io/v2.0/forecast/daily?city=${query}&key=${process.env.REACT_APP_WEATHER_API_KEY}&days=8`\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { makeStyles } from 'decorators';\r\nimport { InputAdornment, TextField } from 'components/controls';\r\nimport { SearchIcon } from 'components/icons';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginBottom: theme.spacing(4)\r\n  }\r\n}));\r\n\r\nconst SearchCity = ({ city, setCity }) => {\r\n  const onCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <TextField\r\n        placeholder=\"Enter city\"\r\n        variant=\"outlined\"\r\n        name={city}\r\n        onChange={onCityChange}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          )\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nSearchCity.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  setCity: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchCity;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { makeStyles } from 'decorators';\r\nimport { Typography } from 'components/controls';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  location: {\r\n    marginRight: 'auto',\r\n    marginBottom: theme.spacing(3)\r\n  },\r\n  date: {\r\n    paddingTop: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nconst WeatherDataTitle = ({ city, country, timezone, date }) => {\r\n  const classes = useStyles();\r\n  const dateCorrect = new Date(date * 1000).toDateString();\r\n\r\n  return (\r\n    <div className={classes.location}>\r\n      <Typography component=\"h2\" variant=\"h4\">\r\n        {city} ({country}), {timezone}\r\n      </Typography>\r\n      <Typography variant=\"h5\" className={classes.date}>\r\n        {dateCorrect}\r\n      </Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeatherDataTitle.propTypes = {\r\n  date: PropTypes.number.isRequired,\r\n  city: PropTypes.string.isRequired,\r\n  country: PropTypes.string.isRequired,\r\n  timezone: PropTypes.string.isRequired\r\n};\r\n\r\nexport default WeatherDataTitle;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { makeStyles } from 'decorators';\r\nimport { Grid, Paper, Typography } from 'components/controls';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center'\r\n  },\r\n  paperMain: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexWrap: 'wrap',\r\n    padding: theme.spacing(2)\r\n  },\r\n  image: {\r\n    width: '150px',\r\n    height: '150px'\r\n  },\r\n  paperItem: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flex: '0 0 33%'\r\n  },\r\n  data: {\r\n    marginLeft: theme.spacing(1),\r\n    fontWeight: '400'\r\n  }\r\n}));\r\n\r\nconst WeatherDataMain = ({\r\n  humidity,\r\n  wind,\r\n  probability,\r\n  pressure,\r\n  temp,\r\n  description,\r\n  sunset,\r\n  sunrise,\r\n  icon\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const sunsetFormatted = new Date(sunset * 1000)\r\n    .toLocaleTimeString()\r\n    .slice(0, 5);\r\n  const sunriseFormatted = new Date(sunrise * 1000)\r\n    .toLocaleTimeString()\r\n    .slice(0, 5);\r\n\r\n  const pressureFormatted = Math.floor(pressure / 1.333);\r\n\r\n  const iconUrl = `https://www.weatherbit.io/static/img/icons/${icon}.png`;\r\n\r\n  return (\r\n    <Grid container spacing={3} justify=\"space-between\">\r\n      <Grid item xs={12} md={4} lg={4}>\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <img src={iconUrl} alt={iconUrl} className={classes.image} />\r\n          <div>\r\n            <Typography component=\"h3\" variant=\"h1\">\r\n              {Math.floor(temp)}&#176;\r\n            </Typography>\r\n            <Typography variant=\"body1\">{description}</Typography>\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid container item xs={12} md={8} lg={8}>\r\n        <Paper elevation={3} className={classes.paperMain}>\r\n          <div className={classes.paperItem}>\r\n            <Typography variant=\"h6\" noWrap>\r\n              Precipitation:\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.data}>\r\n              {probability}%\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.paperItem}>\r\n            <Typography variant=\"h6\" noWrap>\r\n              Wind:\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.data}>\r\n              {Math.floor(wind)} м/с\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.paperItem}>\r\n            <Typography variant=\"h6\" noWrap>\r\n              Sunrise:\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.data}>\r\n              {sunriseFormatted}\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.paperItem}>\r\n            <Typography variant=\"h6\" noWrap>\r\n              Pressure:\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.data}>\r\n              {pressureFormatted} мм\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.paperItem}>\r\n            <Typography variant=\"h6\" noWrap>\r\n              Humidity:\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.data}>\r\n              {humidity}%\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.paperItem}>\r\n            <Typography variant=\"h6\" noWrap>\r\n              Sunset:\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.data}>\r\n              {sunsetFormatted}\r\n            </Typography>\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nWeatherDataMain.propTypes = {\r\n  humidity: PropTypes.number,\r\n  wind: PropTypes.number,\r\n  probability: PropTypes.number,\r\n  pressure: PropTypes.number,\r\n  temp: PropTypes.number,\r\n  sunrise: PropTypes.number,\r\n  sunset: PropTypes.number,\r\n  description: PropTypes.string,\r\n  icon: PropTypes.string\r\n};\r\n\r\nexport default WeatherDataMain;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { makeStyles } from 'decorators';\r\nimport { Card, Grid, Typography } from 'components/controls';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    flexShrink: 0,\r\n    padding: theme.spacing(2)\r\n  },\r\n  img: {\r\n    maxWidth: '50px',\r\n    maxHeight: '50px'\r\n  },\r\n  text: {\r\n    whiteSpace: 'nowrap'\r\n  }\r\n}));\r\n\r\nconst WeatherForecast = ({ forecastData }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container spacing={3} justify=\"space-between\">\r\n      {forecastData.map((item) => (\r\n        <Grid key={item.datetime} item xs>\r\n          <Card className={classes.card}>\r\n            <Typography className={classes.text}>{item.datetime}</Typography>\r\n            <img\r\n              src={`https://www.weatherbit.io/static/img/icons/${item.weather.icon}.png`}\r\n              alt={123}\r\n              className={classes.img}\r\n            />\r\n            <Typography variant=\"h6\">{Math.floor(item.temp)}&#176;</Typography>\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nWeatherForecast.propTypes = {\r\n  forecastData: PropTypes.array.isRequired\r\n};\r\n\r\nexport default WeatherForecast;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport WeatherDataTitle from './Title';\r\nimport WeatherDataMain from './Main';\r\nimport WeatherForecast from './Forecast';\r\n\r\nconst WeatherData = ({ weatherData }) => {\r\n  const {\r\n    city_name,\r\n    country_code,\r\n    timezone,\r\n    data: [firstDayData]\r\n  } = weatherData;\r\n\r\n  const {\r\n    ts,\r\n    weather: { icon, description },\r\n    temp,\r\n    pop,\r\n    wind_spd,\r\n    sunrise_ts,\r\n    pres,\r\n    rh,\r\n    sunset_ts\r\n  } = firstDayData;\r\n\r\n  return (\r\n    <>\r\n      <WeatherDataTitle\r\n        city={city_name}\r\n        country={country_code}\r\n        timezone={timezone}\r\n        date={ts}\r\n      />\r\n      <WeatherDataMain\r\n        humidity={rh}\r\n        wind={wind_spd}\r\n        probability={pop}\r\n        pressure={pres}\r\n        temp={temp}\r\n        description={description}\r\n        sunset={sunset_ts}\r\n        sunrise={sunrise_ts}\r\n        icon={icon}\r\n      />\r\n      <WeatherForecast forecastData={weatherData.data} />\r\n    </>\r\n  );\r\n};\r\n\r\nWeatherData.propTypes = {\r\n  weatherData: PropTypes.object\r\n};\r\n\r\nexport default WeatherData;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { debounce } from 'lodash';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport { useDataFetcher } from 'hooks';\r\nimport { CircularProgress, Collapse, ErrorAlert, ModuleTitle, ModuleWrapper, Typography } from 'components/controls';\r\nimport { getWeather } from 'sources/weather';\r\n\r\nimport SearchCity from './Search';\r\nimport WeatherContent from './WeatherContent';\r\n\r\nconst WeatherPage = () => {\r\n  const [city, setCity] = useState('');\r\n  const { execute, data, loading, error } = useDataFetcher(false, getWeather, city);\r\n\r\n  useEffect(() => {\r\n    if (city) {\r\n      execute();\r\n    }\r\n  }, [city]);\r\n\r\n  const debouncedSetCity = debounce(setCity, 1000);\r\n\r\n  const isEmptyData = data === '';\r\n  const isShowContent = !!data || !!error;\r\n  const isDefault = !isShowContent && !isEmptyData;\r\n  const isLoading = loading || !!error || !data;\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Weather Forecast | TEMPLATE 20</title>\r\n      </Helmet>\r\n      <ModuleWrapper>\r\n        <ModuleTitle name=\"Weather Forecast\" />\r\n        <SearchCity city={city} setCity={debouncedSetCity} execute={execute} />\r\n        <Collapse in={isDefault}>\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            Enter the name of the city\r\n          </Typography>\r\n        </Collapse>\r\n        <Collapse in={isShowContent}>\r\n          {isLoading ? <CircularProgress /> : <WeatherContent weatherData={data} />}\r\n          {error && <ErrorAlert message={error} />}\r\n        </Collapse>\r\n        <Collapse in={isEmptyData}>\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            Oops, Try again\r\n          </Typography>\r\n        </Collapse>\r\n      </ModuleWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherPage;\r\n"],"sourceRoot":""}