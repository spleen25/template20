{"version":3,"sources":["webpack://template20/./scripts/common/sources/moscowDistricts.js","webpack://template20/./scripts/modules/moscowDistrictsQuiz/Game/index.jsx","webpack://template20/./scripts/modules/moscowDistrictsQuiz/StartGame/index.jsx","webpack://template20/./scripts/modules/moscowDistrictsQuiz/index.jsx"],"names":["getMoscowDistricts","axios","process","useStyles","makeStyles","img","width","height","objectFit","margin","contentHeader","display","flexDirection","alignItems","marginBottom","linear","buttons","gridTemplateColumns","gridAutoRows","gridGap","buttonNext","re","Game","step","score","total","allAnswers","currentAnswer","selectedAnswer","onButtonAnswerClick","generateNewQuestion","classes","className","variant","value","src","Cells","Picture","alt","in","Name","map","answer","key","global_id","color","id","onClick","match","propTypes","PropTypes","marginTop","StartGame","n","onButtonClick","totalLabel","wrapper","flexWrap","gap","circular","position","top","right","left","bottom","title","content","useState","isGameStart","setIsGameStart","setCurrentAnswer","setAllAnswers","setScore","setStep","setSelectedAnswer","historyAnswers","setHistoryAnswers","useDataFetcher","data","loading","tmpCurrentAnswer","prevState","filter","d","slice","Helmet","component","length","a"],"mappings":"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","file":"js/347.b18ebf28aa99338cb940.bundle.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getMoscowDistricts = () => {\r\n  return axios.post(\r\n    `https://apidata-new.mos.ru/v1/datasets/60863/rows?api_key=${process.env.REACT_APP_DATA_MOS_API_KEY}&$filter=Cells/startswith(Name,Флаг муниципального округа) eq true`\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { makeStyles } from 'decorators';\r\nimport { Button, Fade, LinearProgress, Typography } from 'components/controls';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  img: {\r\n    width: '100%',\r\n    height: 650,\r\n    objectFit: 'contain',\r\n    margin: '30px 0 10px'\r\n  },\r\n  contentHeader: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    marginBottom: 30\r\n  },\r\n  linear: {\r\n    width: '100%'\r\n  },\r\n  buttons: {\r\n    display: 'grid',\r\n    gridTemplateColumns: 'repeat(2, 1fr)',\r\n    gridAutoRows: '1fr',\r\n    gridGap: 20,\r\n    marginBottom: 30\r\n  },\r\n  buttonNext: {\r\n    width: '100%'\r\n  }\r\n}));\r\n\r\nconst re = /(Флаг муниципального округа\\s+)(.*)(\\s+в )/;\r\n\r\nexport const Game = ({\r\n  step,\r\n  score,\r\n  total,\r\n  allAnswers,\r\n  currentAnswer,\r\n  selectedAnswer,\r\n  onButtonAnswerClick,\r\n  generateNewQuestion\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const getColor = (id) => {\r\n    if (selectedAnswer) {\r\n      return id === currentAnswer.global_id ? 'success' : 'error';\r\n    }\r\n    return 'primary';\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.contentHeader}>\r\n        <LinearProgress variant=\"determinate\" value={step * (total / 100)} className={classes.linear} />\r\n        <Typography variant=\"body1\">\r\n          Всего: {step}/{total}\r\n        </Typography>\r\n        <Typography variant=\"body1\">Правильных ответов: {score}</Typography>\r\n        <img\r\n          src={`https://op.mos.ru/MEDIA/showFile?id=${currentAnswer.Cells.Picture}`}\r\n          alt=\"Флаг\"\r\n          className={classes.img}\r\n        />\r\n        <Fade in={!!selectedAnswer}>\r\n          <Typography variant=\"body2\">{currentAnswer.Cells.Name}</Typography>\r\n        </Fade>\r\n      </div>\r\n      <div>\r\n        <div className={classes.buttons}>\r\n          {allAnswers.map((answer) => (\r\n            <Button\r\n              variant=\"contained\"\r\n              key={answer.global_id}\r\n              color={getColor(answer.global_id)}\r\n              onClick={() => onButtonAnswerClick(answer)}\r\n            >\r\n              {answer.Cells.Name.match(re)[2]}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n        {selectedAnswer && (\r\n          <Button className={classes.buttonNext} variant=\"contained\" onClick={generateNewQuestion}>\r\n            Далее\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGame.propTypes = {\r\n  step: PropTypes.number.isRequired,\r\n  score: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  allAnswers: PropTypes.array.isRequired,\r\n  currentAnswer: PropTypes.object.isRequired,\r\n  selectedAnswer: PropTypes.object,\r\n  onButtonAnswerClick: PropTypes.func.isRequired,\r\n  generateNewQuestion: PropTypes.func.isRequired\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { makeStyles } from 'decorators';\r\nimport { Button, Typography } from 'components/controls';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  buttonNext: {\r\n    marginTop: '30px !important'\r\n  }\r\n}));\r\n\r\nconst declOfNum = (n, titles) =>\r\n  titles[n % 10 === 1 && n % 100 !== 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2];\r\n\r\nexport const StartGame = ({ total, onButtonClick }) => {\r\n  const classes = useStyles();\r\n\r\n  const totalLabel = declOfNum(total, ['район', 'района', 'районов']);\r\n  return (\r\n    <>\r\n      <Typography variant=\"body1\">\r\n        В викторине присутствует {total} {totalLabel}\r\n      </Typography>\r\n      <Button className={classes.buttonNext} variant=\"contained\" onClick={onButtonClick}>\r\n        начать игру\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nStartGame.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n  onButtonClick: PropTypes.func.isRequired\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { difference, sample, shuffle } from 'lodash';\r\n\r\nimport { useDataFetcher } from 'hooks';\r\nimport { getMoscowDistricts } from 'sources/moscowDistricts';\r\nimport { makeStyles } from 'decorators';\r\nimport { CircularProgress, ModuleWrapper, Typography } from 'components/controls';\r\n\r\nimport { Game } from './Game';\r\nimport { StartGame } from './StartGame';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  wrapper: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    gap: 30\r\n  },\r\n  circular: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n    left: 0,\r\n    bottom: 0,\r\n    margin: 'auto'\r\n  },\r\n  title: {\r\n    marginBottom: '60px !important'\r\n  },\r\n  content: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  }\r\n}));\r\n\r\nconst MoscowDistrictsQuiz = () => {\r\n  const [isGameStart, setIsGameStart] = useState(false);\r\n  const [currentAnswer, setCurrentAnswer] = useState({});\r\n  const [allAnswers, setAllAnswers] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [step, setStep] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [historyAnswers, setHistoryAnswers] = useState([]);\r\n\r\n  const { data, loading } = useDataFetcher(true, getMoscowDistricts);\r\n\r\n  const classes = useStyles();\r\n\r\n  const generateNewQuestion = () => {\r\n    setSelectedAnswer(null);\r\n    const tmpCurrentAnswer = sample(difference(data, historyAnswers));\r\n    setCurrentAnswer(tmpCurrentAnswer);\r\n    setHistoryAnswers((prevState) => [...prevState, tmpCurrentAnswer]);\r\n\r\n    setAllAnswers(\r\n      shuffle([\r\n        tmpCurrentAnswer,\r\n        ...shuffle(data)\r\n          .filter((d) => d.global_id !== tmpCurrentAnswer.global_id)\r\n          .slice(0, 3)\r\n      ])\r\n    );\r\n\r\n    setStep((prevState) => prevState + 1);\r\n  };\r\n\r\n  const handleButtonStartGameClick = () => {\r\n    setIsGameStart(true);\r\n    generateNewQuestion();\r\n  };\r\n\r\n  const handleButtonAnswerClick = (a) => {\r\n    if (a.global_id === currentAnswer.global_id) {\r\n      setScore((prevState) => prevState + 1);\r\n    }\r\n    setSelectedAnswer(a);\r\n  };\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Moscow Districts Quiz | TEMPLATE 20</title>\r\n      </Helmet>\r\n      <ModuleWrapper>\r\n        <Typography variant=\"h2\" component=\"h1\" className={classes.title}>\r\n          Moscow Districts Quiz\r\n        </Typography>\r\n        {loading ? (\r\n          <CircularProgress className={classes.circular} />\r\n        ) : (\r\n          <div className={classes.wrapper}>\r\n            <div className={classes.content}>\r\n              {!isGameStart ? (\r\n                <StartGame total={data.length} onButtonClick={handleButtonStartGameClick} />\r\n              ) : (\r\n                <Game\r\n                  step={step}\r\n                  score={score}\r\n                  total={data.length}\r\n                  allAnswers={allAnswers}\r\n                  currentAnswer={currentAnswer}\r\n                  selectedAnswer={selectedAnswer}\r\n                  onButtonAnswerClick={handleButtonAnswerClick}\r\n                  generateNewQuestion={generateNewQuestion}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </ModuleWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoscowDistrictsQuiz;\r\n"],"sourceRoot":""}